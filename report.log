2025-01-24 11:58:26,504 - tensorflow - WARNING - 5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7f9f501c7560> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2025-01-24 12:00:07,594 - tensorflow - WARNING - 6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7f9f50136340> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2025-01-24 17:22:57,751 - tensorflow - WARNING - 5 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7f8eb7d5dc60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2025-01-24 17:27:37,365 - tensorflow - WARNING - 6 out of the last 7 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7f8eddead260> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2025-01-24 17:46:02,765 - tensorflow - WARNING - 5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7ff8bc1d8ae0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2025-01-24 17:47:31,564 - tensorflow - WARNING - 6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7ff833195ee0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2025-01-24 18:31:13,194 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2025-01-24 18:32:30,836 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2025-01-25 14:49:50,306 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2025-01-25 14:53:48,841 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2025-01-25 14:54:07,915 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.3702996320302101, best pos: [211.39760758 286.49721354  46.7332294   11.16257733]
2025-01-25 14:54:39,193 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2025-01-25 14:55:21,966 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.40060593251181825, best pos: [259.53734371 277.59149103  24.00420381  15.02450487]
2025-01-25 14:56:24,953 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2025-01-25 14:57:31,689 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.27961255729154055, best pos: [136.87217518  81.77605344  17.50169288   3.1667923 ]
2025-01-25 15:25:56,180 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 15:26:11,956 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.2864463526116956, best pos: [139.53594286   0.21907662   0.21695522   0.73686956]
2025-01-25 15:26:41,688 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 15:27:05,259 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.4528129315390238, best pos: [7.14899083e+02 4.88904695e-01 4.18287728e-01 5.32722738e-01]
2025-01-25 15:27:36,286 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 15:27:51,740 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.4630444765736173, best pos: [5.94956517e+02 1.83990168e-01 1.16794406e+00 7.15111972e-01]
2025-01-25 15:49:05,948 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 15:59:36,832 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.4363503129836383, best pos: [299.25799112  49.71426717  68.5066875    6.91401314   0.75659074]
2025-01-25 16:34:14,322 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 16:41:31,960 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 16:47:11,965 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.22657787391604164, best pos: [2.08939170e+02 2.86361175e+02 4.98062452e-02 2.09664355e+01
 2.27443324e+01]
2025-01-25 16:51:39,199 - pyswarms.single.global_best - INFO - Optimize for 2 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-25 16:52:57,494 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.24626389120457354, best pos: [214.58399378 291.70625947   0.35365303  66.58616555  93.52637974]
2025-01-27 04:26:34,493 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-27 04:51:05,074 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.23813464685319025, best pos: [ 26.81758043 265.9441299    7.54749377   1.75357625]
2025-01-27 04:51:06,774 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-27 09:22:55,767 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.19887685979554884, best pos: [110.81090509  70.16155109   1.72217622   7.19821188  38.1393653 ]
2025-01-27 14:41:17,090 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-27 15:32:16,769 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.2648656991008358, best pos: [111.64682669 242.35364106  18.47162998   1.08864911]
2025-01-27 15:45:36,227 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-27 16:23:46,540 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.2571437618475614, best pos: [ 75.86912434 101.72160413  14.46181819   1.38437367]
2025-01-28 01:27:11,450 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-28 01:28:14,713 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-28 01:38:59,624 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.2641050104339736, best pos: [293.12684325   0.39004306   0.79812635   0.32572735]
2025-01-28 01:38:59,635 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-28 17:44:02,295 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-28 17:52:49,692 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.28009868900026863, best pos: [108.25063715   0.2909796    0.57726032   0.68183945]
2025-01-29 00:22:09,655 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-01-29 01:04:08,257 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.2530514987368521, best pos: [82.96799416  0.35264508  1.58958055  0.37004184]
2025-02-01 14:00:34,437 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-02-02 01:32:29,343 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-02-02 03:46:59,369 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.21135568847733696, best pos: [246.54952547  41.12577895   0.35310229  35.71679588  10.40638649]
2025-02-02 03:46:59,384 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2025-02-02 05:40:25,442 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.20113378339794702, best pos: [227.26843687  64.22371527   0.33286633  14.05060002  58.37323095]
2025-02-04 01:10:30,902 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
